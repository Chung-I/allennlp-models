name: CI

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
  schedule:
    - cron: '0 10 * * *' # run at 10 AM UTC every day.
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.6', '3.7']

    steps:
    - uses: actions/checkout@v1

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python }}

    - name: Install requirements
      run: |
        pip install --upgrade git+https://github.com/allenai/allennlp.git@master
        pip install -r requirements.txt
        pip install -r dev-requirements.txt

    - name: Lint
      run: |
        flake8 -v
        black -v --check .

    - name: Type check
      run: |
        mypy allennlp_models --ignore-missing-imports --no-strict-optional --no-site-packages

    - name: Run tests
      run: |
        pytest --cov=allennlp_models/ --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python == '3.7'
      uses: codecov/codecov-action@v1.0.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    needs: build
    if: github.event_name == 'release' && github.repository == 'allenai/allennlp-models'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install requirements
      run: |
        pip install -e .
        pip install -r dev-requirements.txt

    - name: Build Package
      run: |
        python setup.py bdist_wheel sdist

    - name: Upload to PyPI
      env:
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*
